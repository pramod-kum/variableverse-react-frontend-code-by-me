-------------React 19---------------
--------older-------
import React, { useState } from 'react'

export default function App() {
  const [joke,setJoke] = useState(null)
  const [isLoading,setIsloading] = useState(false)
  
  const fetchJoke=async()=>{
try{
  setIsloading(true)
const response = await fetch("https://official-joke-api.appspot.com/random_joke");
const data = await response.json();
console.log(data);
setJoke(data)
}catch(error){

  }
  setIsloading(false)
}
  
  return (
    <div>
      <h1>Random Joke Application</h1>
      <button onClick={fetchJoke}>
        {isLoading ? "Loading ..." : "Get a joke"}
      </button>
      {isLoading && <p>Fetching Joke...</p>}
      {joke && (
        <div>
        <h1>{joke.setup}</h1>
        <h1>{joke.punchline}</h1>
      </div>
      )}
    </div>
  )
}
---------------new feature useTransition------------
import React, { useState, useTransition } from 'react'

export default function App() {
  const [joke,setJoke] = useState(null)
  const [isPending,startTransition] = useTransition()
  
  const fetchJoke=async()=>{
  startTransition(async()=>{
  try{
    const response = await fetch("https://official-joke-api.appspot.com/random_joke");
    const data = await response.json();
    console.log(data);
    setJoke(data)
    }catch(error){
    
      }
})
}
  return (
    <div>
      <h1>Random Joke Application</h1>
      <button onClick={fetchJoke}>
        {isPending ? "Loading ..." : "Get a joke"}
      </button>
      {isPending && <p>Fetching Joke...</p>}
      {joke && (
        <div>
        <h1>{joke.setup}</h1>
        <h1>{joke.punchline}</h1>
      </div>
      )}
    </div>
  )
}
-------------Older--------------------------
import React, { useState } from 'react'

export default function App() {
  const [isPanding,setIsPanding] = useState(false)
  const [error,setError] = useState(null)
  const [user,setUser] = useState("")
  const [username,setUsername]=useState("")
  const [password,setPassword]=useState("")
  const login =async()=>{
    setIsPanding(true)
    setError(null)
    await new Promise((resolve)=>setTimeout(resolve,2000))
  if(username==="admin" && password==="password"){
    setUser(username)
  }else{
    setError("Invalid user")
  }
  setIsPanding(false)
  }
  return (
    <div>
      <h1>Login Example</h1>
      
        <input type="text" placeholder='Username' value={username} onChange={(e)=>setUsername(e.target.value)}/>
        <input type="password" placeholder='Password' value={password} onChange={(e)=>setPassword(e.target.value)}/>
        <button onClick={login}>{isPanding ? "Loggin you In...":"Login"}</button>
     
      {error && <p style={{color:"red"}}>{error}</p>}
      {user && <p style={{color:"green"}}>Welcome {user}</p>}
    </div>
  )
}
----------------------------new------------------------
import { useActionState } from "react";

export default function App() {
  const loginAction = async(prevState,formData)=>{
    const username = formData.get("username");
    const password = formData.get("password");
    
    await new Promise((resolve)=>setTimeout(resolve,2000))
    if(username === "Admin" && password === "password"){
      return {user:username}
    }else{
      return {error:"Invalid Credentials"}
    }

  }
  const [result,login,isPending] = useActionState(loginAction,null)
  return (
    <div>
      <h1>Login Example</h1>
      <form action={login}>
        <input type="text" placeholder='Enter Username' name='username'/>
        <input type="password" placeholder='Enter Password' name='password'/>
      <button type='submit'>{isPending?"Logging in..":"Login"}</button>
      </form>
      {result?.user && <p>{result.user}</p>}
      {result?.error && <p>{result.error}</p>}
    </div>
  )
}
---------------Older--------------------------
import React, { useEffect, useRef } from 'react'
const CustomInput = React.forwardRef((props,ref)=>{
  return <input ref={ref} {...props}/>
})
export default function App() {
  const inputRef = useRef(null)
  useEffect(()=>{
    if(inputRef.current){
      inputRef.current.style.backgroundColor ="red";
    }
  })
  return (
    <div>
      <CustomInput ref={inputRef} type="text" placeholder="Enter yout name"/>
    </div>
  )
}
----------------new------------------------
import React, { useEffect, useRef } from 'react'
function CustomInput(props,ref){
  return <input ref={ref} {...props}/>
}
export default function App() {
  const inputRef=useRef(null)
  useEffect(()=>{
    if(inputRef.current){
      inputRef.current.style.backgroundColor = "red"
    }
  })
  return (
    <div>
      <CustomInput ref={inputRef} placeholder="pramod"/>
    </div>
  )
}
----------------useOptimistic use in react 19--------------
//For refrence: https://react.dev/reference/react/useOptimistic

import { useOptimistic, useState, useRef } from "react";

function Thread({ messages, sendMessage }) {
  const formRef = useRef();
  async function formAction(formData) {
    addOptimisticMessage(formData.get("message"));
    formRef.current.reset();
    await sendMessage(formData);
  }
  const [optimisticMessages, addOptimisticMessage] = useOptimistic(
    messages,
    (state, newMessage) => [
      ...state,
      {
        text: newMessage,
        sending: true
      }
    ]
  );

  return (
    <>
      {optimisticMessages.map((message, index) => (
        <div key={index}>
          {message.text}
          {!!message.sending && <small> (Sending...)</small>}
        </div>
      ))}
      <form action={formAction} ref={formRef}>
        <input type="text" name="message" placeholder="Hello!" />
        <button type="submit">Send</button>
      </form>
    </>
  );
}

export default function App() {
  const [messages, setMessages] = useState([
    { text: "Hello there!", sending: false, key: 1 }
  ]);
   async function deliverMessage(message) {
    await new Promise((res) => setTimeout(res, 2000));
    return message;
  }
  async function sendMessage(formData) {
    const sentMessage = await deliverMessage(formData.get("message"));
    setMessages((messages) => [...messages, { text: sentMessage }]);
  }
  return <Thread messages={messages} sendMessage={sendMessage} />;
}

